@page "/"
@inject ProcessStore ProcessStore
@inject ICourier Courier
@implements IDisposable


<PageTitle>Index</PageTitle>
<p style="font-size=50px">Elo</p>

ID:
<NumericEdit Value="process.ID" ReadOnly Class="w-25"/>
Date:
<DatePicker TValue="DateTime?" Date="process.Date" ReadOnly/>
Temperature:
<NumericEdit Value="process.Temperature" ReadOnly/>
Ambient Temperature:
<NumericEdit Value="process.AmbientTemperature" ReadOnly/>
Sugar:
<NumericEdit Value="process.Sugar" ReadOnly/>
Glucose:
<NumericEdit Value="process.Glucose" ReadOnly/>
Maltose:
<NumericEdit Value="process.Maltose" ReadOnly/>
Maltotriosis:
<NumericEdit Value="process.Maltotriosis" ReadOnly/>
Active Yeast:
<NumericEdit Value="process.ActiveYeast" ReadOnly/>
Lattice Yeast:
<NumericEdit Value="process.LatticeYeast" ReadOnly/>
Dead Yeast:
<NumericEdit Value="process.DeadYeast" ReadOnly/>
Ethanol:
<NumericEdit Value="process.Ethanol" ReadOnly/>


@code{
    private ProcessDb process;

    protected override async Task OnInitializedAsync()
    {
        Courier.Subscribe<ProcessUpdated>(OnProcessUpdated);
        RefreshProcess();
    }

    private async Task OnProcessUpdated(ProcessUpdated pu, CancellationToken _)
    {
        await RefreshProcess();
    }

    private async Task RefreshProcess()
    {
        process = await ProcessStore.GetLastRow() ?? new ProcessDb();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Courier.UnSubscribe<ProcessUpdated>(OnProcessUpdated);
    }

}