@page "/"
@inject ProcessStore ProcessStore


<PageTitle>Index</PageTitle>
<p>Elo</p>

ID:
<NumericEdit Value="processList.ID" ReadOnly />
Date:
<DatePicker TValue="DateTime?" Date="processList.Date" ReadOnly />
Temperature:
<NumericEdit Value="processList.Temperature" ReadOnly/>
Ambient Temperature:
<NumericEdit Value="processList.AmbientTemperature" ReadOnly/>
Sugar:
<NumericEdit Value="processList.Sugar" ReadOnly/>
Glucose:
<NumericEdit Value="processList.Glucose" ReadOnly/>
Maltose:
<NumericEdit Value="processList.Maltose" ReadOnly/>
Maltotriosis:
<NumericEdit Value="processList.Maltotriosis" ReadOnly/>
Active Yeast:
<NumericEdit Value="processList.ActiveYeast" ReadOnly/>
Lattice Yeast:
<NumericEdit Value="processList.LatticeYeast" ReadOnly/>
Dead Yeast:
<NumericEdit Value="processList.DeadYeast" ReadOnly/>
Ethanol:
<NumericEdit Value="processList.Ethanol" ReadOnly/>



@code{
    private ProcessDb processList;

    protected override async Task OnInitializedAsync()
    {
        processList = await ProcessStore.GetLastRow();
        Task.Factory.StartNew(() => AutoRefresh(), TaskCreationOptions.LongRunning);
    }

    private async Task AutoRefresh()
    {
        while (true)
        { 
            await Task.Delay(TimeSpan.FromSeconds(1));
            var currentProcessList = await ProcessStore.GetLastRow();


            if (currentProcessList.ID == processList.ID)
            {
                continue;
            }

            processList = currentProcessList;
            InvokeAsync(StateHasChanged);

        }
        
    }
}