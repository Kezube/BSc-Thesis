@page "/counter"
@using System.Reflection

@inject ProcessStore ProcessStore


<PageTitle>Counter</PageTitle>
<SelectList TItem="string"
            TValue="string"
            Data="@ColumneNames"
            TextField="@((item)=>item)"
            ValueField="@((item)=>item)"
            DefaultItemText="Filtr" 
            SelectedValueChanged="OnSelected"/>
            
<SelectList TItem="int"
            TValue="int"
            Data="@ProcessCout"
            TextField="@((item)=>item.ToString())"
            ValueField="@((item)=>item)"
            DefaultItemText="Nr Procesu" 
            SelectedValueChanged="OnSelectedID"/>

<Check TValue="bool"  Checked="@chartHoldOn" CheckedChanged="@OnSelectedChartHoldOn">Only One Chart</Check>


<LineChart @ref="lineChart" TItem="WatcherEvent" Options="@lineChartOptions" />
@code {
    private LineChart<WatcherEvent> lineChart;
    private List<WatcherEvent> dataList = new List<WatcherEvent>();
    private ProcessDb[] processList;
    private ProcessDb[] processListFiltered;

    private static string[] ColumneNames = new string[] { };
    private static int[] ProcessCout = new int[] {1,2,3,4,5};

    private int selectedID;
    private int ColorID;
    private string filterSelectedValue;
    private bool chartHoldOn;

    LineChartOptions lineChartOptions = new()
    {
        Parsing = new ChartParsing
        {
            XAxisKey = "sector",
            YAxisKey = "count",
        }
    };

    private List<string> backgroundColors = new() { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    private List<string> borderColors = new() { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    private bool isAlreadyInitialised;

    public class WatcherEvent
    {
        public string Sector { get; set; }

        public double Count { get; set; }

        public DateTime Date { get; set; }
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if (isAlreadyInitialised = false)
        {
            isAlreadyInitialised = true;
            await lineChart.Clear();
            await lineChart.AddDataSet( GetLineChartDataset() );
        }
    }

    protected async Task ChartRefresh()
    {
        if (chartHoldOn)
        {
            await lineChart.Clear();
            ColorID = 0;
        }


        await lineChart.AddDataSet( GetLineChartDataset() );
    }

    protected override async Task OnInitializedAsync()
    {
        chartHoldOn = true;
        ColumneNames = GetColumneNames();
        processList = await ProcessStore.GetAllRows();
        processListFiltered = processList;
        await base.OnInitializedAsync();

    }


    private LineChartDataset<WatcherEvent> GetLineChartDataset()
    {

        processList = processListFiltered;
        ColorID++;
        if(ColorID > 5)
        {
            ColorID = 0;
        }
        return new()
        {
            Label = filterSelectedValue,
            Data = dataList,
            BackgroundColor = backgroundColors[ColorID],
            BorderColor = borderColors[ColorID],
            Fill = true,
            PointRadius = 3,
            BorderWidth = 1,
            PointBorderColor = Enumerable.Repeat( borderColors.First(), 6 ).ToList(),
            CubicInterpolationMode = "monotone",

        };
    }

    private string[] GetColumneNames()
    {
        Type type = typeof(ProcessDb);
        PropertyInfo[] properties = type.GetProperties();

        return properties.Where(x => x.Name != "ID" && x.Name != "Date").Select(x => x.Name).ToArray();
    }

    private async void OnSelectedID(int value)
    {
        selectedID = value;
        processListFiltered = await ProcessStore.GetAllRowsByID(selectedID);

        OnSelected(filterSelectedValue);
    }

    private async void OnSelectedChartHoldOn(bool value)
    {
        chartHoldOn = value;
    }

    private async void OnSelected(string value)
    {
        if (selectedID < 1)
        {
            OnSelectedID(1);
        }
        filterSelectedValue = value;
        dataList.Clear();

        switch (filterSelectedValue)
        {
            case "Temperature":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.Temperature,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "AmbientTemperature":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.AmbientTemperature,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "Glucose":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.Glucose,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "Maltose":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.Maltose,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "Maltotriosis":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.Maltotriosis,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "Sugar":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.Sugar,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "DeadYeast":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.DeadYeast,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "ActiveYeast":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.ActiveYeast,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "LatticeYeast":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.LatticeYeast,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            case "Ethanol":
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.Ethanol,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;
            default:
                foreach (var processDb in processListFiltered)
                {
                    var watcherEvent = new WatcherEvent()
                    {
                        Sector = processDb.ID.ToString(),
                        Count = processDb.Temperature,
                        Date = processDb.Date
                    };
                    dataList.Add(watcherEvent);
                }
                break;

        }

        ChartRefresh();


        


        
    }
    
}



