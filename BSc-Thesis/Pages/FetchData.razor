@page "/ProcessDeta"
@using System.Linq.Expressions

<PageTitle>Weather forecast</PageTitle>

@inject IProcessStore ProcessStore


<SelectList TItem="string"
            TValue="string"
            Data="@_columneNames"
            TextField="@(item => item)"
            ValueField="@(item => item)"
            DefaultItemText="Filtr"
            SelectedValueChanged="GetFilteredProcess"/>


@switch (_filterSelectedValue)
{
    case "ID":
        <SelectList TItem="int"
                    TValue="int"
                    Data="@_processCout"
                    TextField="@(item => item.ToString())"
                    ValueField="@(item => item)"
                    DefaultItemText="Nr Procesu"
                    SelectedValueChanged="OnSelectedID"/>
        break;

    case "Date":
        <DatePicker TValue="DateTime?"
                    DateChanged="OnSelectedDateFrom"
                    Date=_datePickerFrom/>
        <DatePicker TValue="DateTime?"
                    DateChanged="OnSelectedDateTo"
                    Date=_datePickerTo/>
        break;
    case "Filtr":
    case null:
        break;

    default:
        <NumericPicker
            TValue="double"
            ModifyValueOnWheel WheelOn="NumericWheelOn.Hover"
            ValueChanged="OnSelectedNumLow"
            DebounceInterval="500"
            Debounce="true"/>
        <NumericPicker
            TValue="double"
            ModifyValueOnWheel WheelOn="NumericWheelOn.Hover"
            ValueChanged="OnSelectedNumHigh"
            DebounceInterval="500"
            Debounce="true"/>
        break;
}


<DataGrid TItem="ProcessDb"
          Data="_processList"
          PageSize="30"
          ShowPager
          Hoverable>
    <DataGridCommandColumn/>
    <DataGridColumn Field="@nameof(ProcessDb.ID)" Caption="#" Sortable="false"/>
    <DataGridColumn Field="@nameof(ProcessDb.Date)" Caption="Date" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Temperature)" Caption="Temperature" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.AmbientTemperature)" Caption="Ambient Temperature" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Glucose)" Caption="Glucose" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Maltose)" Caption="Maltose" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Maltotriosis)" Caption="Maltotriosis" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Sugar)" Caption="Sugar" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.ActiveYeast)" Caption="Active Yeast" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.LatticeYeast)" Caption="Lattice Yeast" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.DeadYeast)" Caption="Dead Yeast" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Ethanol)" Caption="Ethanol Temperature" Editable/>
</DataGrid>


@code{
    DateTime? _datePickerFrom;
    DateTime? _datePickerTo;
    private double _lowLimit;
    private double _highLimit;
    private int _selectedId;
    private ProcessDb[] _processList;
    private static string[] _columneNames = { };
    private static IEnumerable<int> _processCout;
    private string _filterSelectedValue;

    protected override async Task OnInitializedAsync()
    {
        _columneNames = GetColumneNames();
        _processList = await ProcessStore.GetAll();
        _processCout = await GetProcessCout();
        _datePickerFrom = new DateTime(2022, 12, 1); ;
        _datePickerTo = new DateTime(2023, 12, 31); ;

        await base.OnInitializedAsync();
    }

    private string[] GetColumneNames()
    {
        var type = typeof(ProcessDb);
        var properties = type.GetProperties();
        return properties.Select(x => x.Name).ToArray();
    }

    private async Task<IEnumerable<int>> GetProcessCout()
    {
        var process = await ProcessStore.GetLast();
        var cout = process.ID / 100000;
        var couter = new List<int>();
        for (var i = 1; i <= cout; i++)
            couter.Add(i);
        return couter;
    }

    private async Task OnSelectedNumLow(double value)
    {
        _lowLimit = value;
        if (_highLimit <= _lowLimit)
            _highLimit = _lowLimit + 1;

        await GetFilteredProcess(_filterSelectedValue);
    }

    private async Task OnSelectedNumHigh(double value)
    {
        _highLimit = value;
        if (_lowLimit >= _highLimit)
            _lowLimit = _highLimit - 1;

        await GetFilteredProcess(_filterSelectedValue);
    }

    private async Task OnSelectedDateFrom(DateTime? value)
    {
        _datePickerFrom = value;
        await GetFilteredProcess(_filterSelectedValue);
    }

    private async Task OnSelectedDateTo(DateTime? value)
    {
        _datePickerTo = value;
        await GetFilteredProcess(_filterSelectedValue);
    }

    private async Task OnSelectedID(int value)
    {
        _selectedId = value;
        await GetFilteredProcess(_filterSelectedValue);
    }

    private async Task GetFilteredProcess(string value)
    {
        _filterSelectedValue = value;
        if (_filterSelectedValue == "ID")
        {
            _processList = await ProcessStore.GetByID(_selectedId);
            return;
        }

        Expression<Func<ProcessDb, bool>> expression = _filterSelectedValue switch
        {
            "Date" => x => x.Date >= _datePickerFrom && x.Date <= _datePickerTo,
            "Temperature" => x => x.Temperature >= _lowLimit && x.Temperature <= _highLimit,
            "AmbientTemperature" => x => x.AmbientTemperature >= _lowLimit && x.AmbientTemperature <= _highLimit,
            "Glucose" => x => x.Glucose >= _lowLimit && x.Glucose <= _highLimit,
            "Maltose" => x => x.Maltose >= _lowLimit && x.Maltose <= _highLimit,
            "Maltotriosis" => x => x.Maltotriosis >= _lowLimit && x.Maltotriosis <= _highLimit,
            "Sugar" => x => x.Sugar >= _lowLimit && x.Sugar <= _highLimit,
            "DeadYeast" => x => x.DeadYeast >= _lowLimit && x.DeadYeast <= _highLimit,
            "ActiveYeast" => x => x.ActiveYeast >= _lowLimit && x.ActiveYeast <= _highLimit,
            "LatticeYeast" => x => x.LatticeYeast >= _lowLimit && x.LatticeYeast <= _highLimit,
            "Ethanol" => x => x.Ethanol >= _lowLimit && x.Ethanol <= _highLimit,
            _ => x => x == x
            };

        _processList = await ProcessStore.GetWithFilter(expression);
    }

}