@page "/ProcessDeta"

<PageTitle>Weather forecast</PageTitle>

@inject ProcessStore ProcessStore


<SelectList TItem="string"
            TValue="string"
            Data="@ColumneNames"
            TextField="@(item => item)"
            ValueField="@(item => item)"
            DefaultItemText="Filtr"
            SelectedValueChanged="OnSelected"/>

            
@switch (filterSelectedValue)
{
    case "ID":
        <SelectList TItem="int"
                    TValue="int"
                    Data="@ProcessCout"
                    TextField="@(item => item.ToString())"
                    ValueField="@(item => item)"
                    DefaultItemText="Nr Procesu"
                    SelectedValueChanged="OnSelectedID"/>
        break;

    case "Date":
        <DatePicker TValue="DateTime?"
                    DateChanged="OnSelectedDateFrom"
                    Date="DateTime.MinValue"/>
        <DatePicker TValue="DateTime?"
                    DateChanged="OnSelectedDateTo"
                    Date="DateTime.MaxValue"/>
        break;
    case "Filtr":
    case null:
        break;

    default:
        <NumericPicker
            TValue="double"
            ModifyValueOnWheel WheelOn="NumericWheelOn.Hover"
            ValueChanged="OnSelectedNumLow"
            DebounceInterval="500"
            Debounce="true"/>
        <NumericPicker
            TValue="double"
            ModifyValueOnWheel WheelOn="NumericWheelOn.Hover"
            ValueChanged="OnSelectedNumHigh"
            DebounceInterval="500"
            Debounce="true"/>
        break;
}


<DataGrid TItem="ProcessDb"
          Data="processListFiltered"
          PageSize="30"
          ShowPager
          Hoverable>
    <DataGridCommandColumn/>
    <DataGridColumn Field="@nameof(ProcessDb.ID)" Caption="#" Sortable="false"/>
    <DataGridColumn Field="@nameof(ProcessDb.Date)" Caption="Date" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Temperature)" Caption="Temperature" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.AmbientTemperature)" Caption="Ambient Temperature" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Glucose)" Caption="Glucose" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Maltose)" Caption="Maltose" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Maltotriosis)" Caption="Maltotriosis" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Sugar)" Caption="Sugar" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.ActiveYeast)" Caption="Active Yeast" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.LatticeYeast)" Caption="Lattice Yeast" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.DeadYeast)" Caption="Dead Yeast" Editable/>
    <DataGridColumn Field="@nameof(ProcessDb.Ethanol)" Caption="Ethanol Temperature" Editable/>
</DataGrid>


@code{
    DateTime? datePickerFrom;
    DateTime? datePickerTo;
    private double lowLimit;
    private double highLimit;
    private int selectedID;
    private ProcessDb[] processList;
    private ProcessDb[] processListFiltered;
    private static string[] ColumneNames = { };
    private static IEnumerable<int> ProcessCout;
    private string filterSelectedValue;

    protected override async Task OnInitializedAsync()
    {
        ColumneNames = GetColumneNames();
        processList = await ProcessStore.GetAllRows();
        processListFiltered = processList;
        ProcessCout = await GetProcessCout();
        await base.OnInitializedAsync();
    }
    private string[] GetColumneNames()
    {
        var type = typeof(ProcessDb);
        var properties = type.GetProperties();
        return properties.Select(x => x.Name).ToArray();
    }
    private async Task<IEnumerable<int>> GetProcessCout()
    {
        var process =  await ProcessStore.GetLastRow();
        var cout = process.ID / 100000;
        var couter = new List<int>();
        for (var i = 1; i <= cout; i++)
            couter.Add(i);
        return couter;
    }

    private async void OnSelectedNumLow(double value)
    {
        lowLimit = value;
        if (highLimit <= lowLimit)
            highLimit = lowLimit + 1;
        
        OnSelected(filterSelectedValue);
    }

    private void OnSelectedNumHigh(double value)
    {
        highLimit = value;
        if (lowLimit >= highLimit)
        {
            lowLimit = highLimit - 1;
        }
        OnSelected(filterSelectedValue);
    }

    private void OnSelectedDateFrom(DateTime? value)
    {
        datePickerFrom = value;
        OnSelected(filterSelectedValue);
    }

    private void OnSelectedDateTo(DateTime? value)
    {
        datePickerTo = value;
        OnSelected(filterSelectedValue);
    }

    private void OnSelectedID(int value)
    {
        selectedID = value;
        OnSelected(filterSelectedValue);
    }

    private async Task OnSelected(string value)
    {
        filterSelectedValue = value;


        if (filterSelectedValue == "ID")
        {
            processListFiltered = await ProcessStore.GetAllRowsByID(selectedID);
            return;
        }

        var filterRequest = filterSelectedValue switch
        {
            "Date" => new ProcessFilterRequest(ProcessFilterOptions.Date, datePickerFrom ?? DateTime.Now, datePickerTo ?? DateTime.Now),
            "Temperature" => new ProcessFilterRequest(ProcessFilterOptions.Temperature, lowLimit, highLimit),
            "AmbientTemperature" => new ProcessFilterRequest(ProcessFilterOptions.AmbientTemperature, lowLimit, highLimit),
            "Glucose" => new ProcessFilterRequest(ProcessFilterOptions.Glucose, lowLimit, highLimit),
            "Maltose" => new ProcessFilterRequest(ProcessFilterOptions.Maltose, lowLimit, highLimit),
            "Maltotriosis" => new ProcessFilterRequest(ProcessFilterOptions.Maltotriosis, lowLimit, highLimit),
            "Sugar" => new ProcessFilterRequest(ProcessFilterOptions.Sugar, lowLimit, highLimit),
            "DeadYeast" => new ProcessFilterRequest(ProcessFilterOptions.DeadYeast, lowLimit, highLimit),
            "ActiveYeast" => new ProcessFilterRequest(ProcessFilterOptions.ActiveYeast, lowLimit, highLimit),
            "LatticeYeast" => new ProcessFilterRequest(ProcessFilterOptions.LatticeYeast, lowLimit, highLimit),
            "Ethanol" => new ProcessFilterRequest(ProcessFilterOptions.Ethanol, lowLimit, highLimit),
            _ => throw new ArgumentOutOfRangeException(nameof(filterSelectedValue))
            };

        if (filterRequest is not null)
            processListFiltered = await ProcessStore.GetFilteredProcess(filterRequest);
    }

}